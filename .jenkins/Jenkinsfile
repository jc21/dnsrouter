@Library('jc21') _

pipeline {
	options {
		buildDiscarder(logRotator(numToKeepStr: '5'))
		disableConcurrentBuilds()
		ansiColor('xterm')
	}
	environment {
		BUILD_VERSION = getVersion()
		BUILD_COMMIT  = getCommit()
	}
	agent {
		label 'docker'
	}
	stages {
		stage('Build') {
			steps {
				sh './scripts/ci/lint.sh'
				sh './scripts/ci/unit.sh'
				sh './scripts/build.sh'
			}
			post {
				always {
					dir('test-results') {
						archiveArtifacts(artifacts: 'coverage.html', allowEmptyArchive: true)
						junit allowEmptyResults: true, testResults: 'unit-results.xml'
					}
				}
			}
		}
		stage('Publish') {
			when {
				allOf {
					branch 'master'
					not {
						equals expected: 'UNSTABLE', actual: currentBuild.result
					}
				}
			}
			steps {
				dir(path: 'bin') {
					archiveArtifacts(artifacts: '**/*', caseSensitive: true, onlyIfSuccessful: true)
				}
				githubRelease('jc21/dnsrouter', "$BUILD_VERSION", 'bin')
			}
		}
	}
	post {
		always {
			printResult(true)
		}
	}
}

def getVersion() {
	ver = sh(script: 'cat .version', returnStdout: true)
	return ver.trim()
}

def getCommit() {
	ver = sh(script: 'git log -n 1 --format=%h', returnStdout: true)
	return ver.trim()
}
